import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AuthApproach, AuthState, User } from './types';

const initialState: AuthState = {
  approach: null,

  phoneNumber: null,

  oauthProvider: null,
  oauthCode: null, 

  isVerified: false, 
  isUserRegistered: false,
  verificationToken: null,

  user: null,
  loading: false,
  error: null,
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    // –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥–∞
    setAuthApproach: (state, action: PayloadAction<AuthApproach>) => {
      state.approach = action.payload;
      state.error = null;
    },

    // üî¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    setPhoneNumber: (state, action: PayloadAction<string>) => {
      state.phoneNumber = action.payload;
      state.isVerified = false;
      state.verificationToken = null;
    },

    // üîë –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    setOauthProvider: (state, action: PayloadAction<'vk' | 'yandex'>) => {
      state.oauthProvider = action.payload;
      state.isVerified = false;
      state.verificationToken = null;
      state.oauthCode = null;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π code
    },

    // üîê –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OAuth code (–Ω–æ–≤—ã–π —Ä–µ–¥—å—é—Å–µ—Ä!)
    setOauthCode: (state, action: PayloadAction<string>) => {
      state.oauthCode = action.payload;
      state.loading = true;    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    },

    // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —É—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è 
    setVerificationSuccess: (state, action: PayloadAction<{ token: string }>) => {
      state.verificationToken = action.payload.token;
      state.isVerified = true;
      state.loading = false;
      state.error = null;
    },

    // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    setRegistrationStatus: (state, action: PayloadAction<boolean>) => {
      state.isUserRegistered = action.payload;
      state.loading = false;
    },

    // üü† –ù–∞—á–∞–ª–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ)
    authStart: (state) => {
      state.loading = true;
      state.error = null;
    },

    // üë§ –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ/–ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    authSuccess: (state, action: PayloadAction<User>) => {
      state.user = action.payload;
      state.loading = false;
      state.error = null;
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      state.isUserRegistered = true;
    },

    // ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    authFailure: (state, action: PayloadAction<string>) => {
      state.loading = false;
      state.error = action.payload;
    },

    // üßπ –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
    clearError: (state) => {
      state.error = null;
    },

    // üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    logout: (state) => {
      state.approach = null;
      state.phoneNumber = null;
      state.oauthProvider = null;
      state.verificationToken = null;
      state.isVerified = false;
      state.isUserRegistered = false;
      state.user = null;
      state.loading = false;
      state.error = null;
      state.oauthCode = null;
    },

    // ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateProfile: (state, action: PayloadAction<Partial<User>>) => {
      if (state.user) {
        state.user = { ...state.user, ...action.payload };
      }
    },
  },
});

export const {
  setAuthApproach,
  setPhoneNumber,
  setOauthProvider,
  setVerificationSuccess,
  setRegistrationStatus,
  setOauthCode,
  authStart,
  authSuccess,
  authFailure,
  clearError,
  logout,
  updateProfile,
} = authSlice.actions;

export default authSlice.reducer;